################## Configurando rotas
//Snippet RocketSeat para componentes
rfc
// o BrowserRouter foi utilizado diretamente no arquivo App.js
// O motivo é que um dos componentes estará sempre presente e precisará ter acesso às rotas

############### Estilos Globais
//configuração padrão na pasta styles o arquivo global.js

############### Header
// snippet rocketseat para criar o estyled components
styled


############### Home Page
// biblioteca polished para lidar com cores para o botão
yarn add polished

############### Configurando API
// utilizando a biblioteca json-server
yarn global add json-server
// pasta services em src com arquivo api.js
// instalar o axios
yarn add axios
//configurar o axios no arquivo api.js
//rodar comando para deixar o json server rodando (o -w dá um reload no server quando houver alterações)
json-server <nome-arquivo> -p <porta-definida-no-axios> (-w)
json-server server.json -p 3333

############## Chamadas a API
//configurar o arquivo index.js da Home para utilizar a api
//nova pasta em src chamada util com arquivo format.js dentro

############# Configurações Redux - Início
//instalar redux e sua integração com o react
yarn add redux react-redux
//nova pasta em src chamada store (onde os arquivos relacionados ao redux ficarão)
//configuração inicial em um arquivo index.js na pasta store
//importar o Provider no arquivo App.js
//PARA ORGANIZAR: criar uma pasta modules em store
//dentro da pasta modules criar a pasta para o reducer do carrinho chamada cart
//dentro da pasta cart criar o arquivo reducer.js

//PARA PODER LIDAR COM VARIOS ESTADOS NO REDUX
//novo arquivo em modules chamado rootReducer.js

############## Utilizando o Redux - Adicionar itens ao carrinho
//importar o connect (do react-redux) à pagina Home
//mover o export default para a parte de baixo do componente
//alterar o botão de adicionar ao carrinho
//configurar o reducer do carrinho

//configurar o header para utilizar o reducer do carrinho


############## Reactotron + Redux
//instalar o reactotron no computador
// instalar as dependencias 
yarn add reactotron-react-js reactotron-redux
// criar uma pasta config em src com o arquivo
// configurar o arquivo
// nova regra no arquivo .eslintrc.js
'no-console': ["error", {allow: ["tron"]}]

//alteração do arquivo index.js da pasta store para integrar o redux ao reactotron
//importar as configurações do reactotron ao App.js antes da importação do store do redux


############## Listagem dos produtos do carrinho

//configurar o index.js de Cart para utilizar o Redux e realizar as modificações necessárias
//alterar o reducer do carrinho para adicionar um campo de quantidade ao estado (amount)


############### Verificando itens iguais no carrinho
// utilização do immer para que possamos fazer alterações diretas no estado (por exemplo push...etc)
yarn add immer
// realizar a modificação no reducer do carrinho
// nova rule no .eslintrc.js para nao acusar erros na alteração de um parametro 
'no-param-reassign': 'off'

############## Remover o produto do carrinho
//nova action no botão de remoção
//novo case no reducer do carrinho

############## Refatorando as actions
//novo arquivo chamado action.js na pasta /src/store/modules/cart
//alterações das actions dos arquivos index.js tanto da Home quanto do Cart
//importação das actions para os mesmos arquivos de index.js
//utilização do mapDispatchToProps para converter as actions para props
//importação do bindActionCreators do 'redux' para os arquivos que irão utilizar as actions
//passar o mapDispatchToProps para o connect() como segundo parâmetro

############## Utilizando botões de adicionar ou remover na quantidade
// duas novas funções no cart index.js
// nova action no arquivo de actions.js do cart
// atribuição das funções aos botões

############# Calculo de totais
// alteração do objeto recebido no carrinho
// criação de nova props chamada totais ao carrinho

############ Mostrando quantidade de cada item no carrinho
// criar nova prop através do setStateToProps ao index.js da Home

############ Redux Saga - Middlewares para o Redux
// nova dependencia
yarn add redux-saga
// novo arquivo chamado sagas.js no module de cart
// alteração das actions
// alteração no index.js da pagina Home
// alteração do Reducer.js do carrinho

/////// CONFIGURAR O REDUX NA APLICAÇÃO
// novo arquivo em /store/modules chamado rootSaga.js
// configurar o arquivo index.js de dentro da pasta store para utilizar o redux-saga

############## Reactotron + Saga
// nova dependencia
yarn add reactotron-redux-saga

